buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'maven-publish'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

ext {
    if (!project.hasProperty('manasmodsUsername')) {
        System.out.println("No ManasMods Repo User found.")
        //DO NOT WRITE ANYTHING INTO THIS FIELD! ANYONE CEN SEE THIS FIELD!!
        manasmodsUsername = ""
    }

    if (!project.hasProperty('manasmodsPassword')) {
        System.out.println("No ManasMods Repo User password found.")
        //DO NOT WRITE ANYTHING INTO THIS FIELD! ANYONE CEN SEE THIS FIELD!!
        manasmodsPassword = ""
    }
}

version = "${minecraftVersion}-${modVersion}"
group = 'com.github.manasmods'
archivesBaseName = "${modId}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "${parchmentVersion}-${minecraftVersion}"
    copyIdeResources = true

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.logging.mojang.level', 'debug'
            property 'mixin.debug.export', 'true'
            arg "-mixin.config=tensura_iron_spell.mixins.json"

            mods {
                tensura_iron_spell {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runServer')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.export', 'true'
            arg "-mixin.config=tensura_iron_spell.mixins.json"

            arg "nogui"
            mods {
                tensura_iron_spell {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${modId}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', "manascore"

            mods {
                tensura_iron_spell {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modId}"
            arg "-mixin.config=tensura_iron_spell.mixins.json"

            mods {
                tensura_iron_spell {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
    }
}

jarJar.enable()

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net' }
    maven {
        url = 'https://nexus.nighti.dev/repository/manasmods/'
        credentials {
            username System.getenv().getOrDefault("MANAS_REPO_USER", nexusUsername)
            password System.getenv().getOrDefault("MANAS_REPO_USER_PASSWORD", nexusPassword)
        }
    }

    maven {
        name = "Iron's Maven - Release"
        url = "https://code.redspace.io/releases"
    }

    maven {
        name = "Iron's Maven - Snapshots"
        url = "https://code.redspace.io/snapshots"
    }

    maven { url = "https://maven.enginehub.org/repo/" }
    maven { url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    maven { url = "https://maven.theillusivec4.top" }
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.kosmx.dev/" }

    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }

    maven { url "https://dl.cloudsmith.io/public/manasmods/manascore/maven/" }

    maven { url 'https://jitpack.io' }

    maven { url "https://maven.firstdarkdev.xyz/snapshots" }

    flatDir {
        dirs 'lib'
    }
}

dependencies {
    //Minecraft Forge
    minecraft "net.minecraftforge:forge:${minecraftVersion}-${forgeVersion}"

    implementation fg.deobf("com.github.manasmods:TensuraMod:${minecraftVersion}-${tensuraVersion}")
    //TerraBlender is used to generate our Biomes
    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${minecraftVersion}-${terraBlenderVersion}")
    //jarJar(group: 'com.github.glitchfiend', name: 'TerraBlender-forge', version: "[${minecraftVersion}-${terraBlenderVersion.substring(0, terraBlenderVersion.indexOf('.') + 1)},${minecraftVersion}-${getNextMajorMinecraftVersion(terraBlenderVersion)})")

    // ManasCore and Dependencies
    implementation fg.deobf("com.github.manasmods:ManasCore:${minecraftVersion}-${manasCoreVersion}:slim")
    implementation fg.deobf("com.lowdragmc.photon:photon-forge-${minecraftVersion}:${photonVersion}") {
        transitive = false
    }
    implementation fg.deobf("com.lowdragmc.ldlib:ldlib-forge-${minecraftVersion}:${ldlibVersion}") {
        transitive = false
    }
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixinExtrasVersion}"))
    implementation("io.github.llamalad7:mixinextras-forge:${mixinExtrasVersion}")

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //Iron Spell
    implementation fileTree("lib")
    implementation fg.deobf("io.redspace.ironsspellbooks:irons_spellbooks:${ironsSpellsVersion}")
    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${geckolib_version}")
    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")
    runtimeOnly fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_animator_version}")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    implementation "com.google.code.gson:gson:${gson_version}"
}

mixin {
    add sourceSets.main, "tensura_iron_spell.refmap.json"
    config "tensura_iron_spell.mixins.json"
}

reobf {
    // jarJar {}
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "tensura_iron_spell",
                "Specification-Vendor"    : "tensura_iron_spellsareus",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "tensura_iron_spellsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "tensura_iron_spell.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            name = "manasmods"
            credentials {
                username System.getenv().getOrDefault("MANAS_REPO_USER", manasmodsUsername)
                password System.getenv().getOrDefault("MANAS_REPO_USER_PASSWORD", manasmodsPassword)
            }
            url "https://manasmods.bytesafe.dev/maven/manasmods"
        }
    }
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    //Copy it into the build dir
    it.from(sourceSets.main.resources) {
        def forgeLoaderVersion = forgeVersion.substring(0, forgeVersion.indexOf('.'))
        def nextMajorMinecraftVersion = getNextMajorMinecraftVersion(minecraftVersion)
        def minecraftVersionCheck = "[${minecraftVersion},${nextMajorMinecraftVersion})"
        def ironVersionCheck = "[${ironsSpellsVersion},)"

        include "META-INF/mods.toml"
        expand 'modVersion': "${modVersion}",
                'forgeLoaderVersion': "[${forgeLoaderVersion},)",
                'minecraftVersionCheck': "${minecraftVersionCheck}",
                'ironVersionCheck': "${ironVersionCheck}"
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

static String getNextMajorMinecraftVersion(String currentVersion) {
    def version = currentVersion.substring(0, currentVersion.indexOf('.'))
    def majorVersion = currentVersion.substring(currentVersion.indexOf('.') + 1, currentVersion.indexOf('.', currentVersion.indexOf('.') + 1))
    def majorInt = Integer.valueOf(majorVersion)
    majorInt++
    majorVersion = majorInt.toString()
    return "${version}.${majorVersion}"
}
